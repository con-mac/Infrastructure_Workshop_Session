# Terraform Apply Workflow
# IT Infrastructure Workshop - University Apprenticeship Programme
# 
# This workflow applies infrastructure changes after PR approval
# DevOps team will handle application deployment workflows

name: 'Terraform Apply'

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-west-2'

jobs:
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply \
            -var-file="${{ matrix.environment }}.tfvars" \
            -auto-approve

      - name: Get Infrastructure Outputs
        id: outputs
        run: |
          cd terraform
          echo "alb_dns_name=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT
          echo "db_endpoint=$(terraform output -raw db_endpoint)" >> $GITHUB_OUTPUT
          echo "vpc_id=$(terraform output -raw vpc_id)" >> $GITHUB_OUTPUT
          echo "application_url=$(terraform output -raw application_url)" >> $GITHUB_OUTPUT

      - name: Update Infrastructure Status
        run: |
          echo "## 🏗️ Infrastructure Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Successfully Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Infrastructure Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Load Balancer:** ${{ steps.outputs.outputs.alb_dns_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Database Endpoint:** ${{ steps.outputs.outputs.db_endpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "- **VPC ID:** ${{ steps.outputs.outputs.vpc_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Application URL:** ${{ steps.outputs.outputs.application_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Next Steps for DevOps Team" >> $GITHUB_STEP_SUMMARY
          echo "1. Deploy application containers to the infrastructure" >> $GITHUB_STEP_SUMMARY
          echo "2. Configure CI/CD pipelines for application deployment" >> $GITHUB_STEP_SUMMARY
          echo "3. Set up application monitoring and alerting" >> $GITHUB_STEP_SUMMARY
          echo "4. Implement blue-green deployment strategy" >> $GITHUB_STEP_SUMMARY

      - name: Notify DevOps Team
        if: matrix.environment == 'prod'
        run: |
          echo "🚀 Production infrastructure is ready for application deployment!"
          echo "Please proceed with the DevOps deployment workflow."

  infrastructure-health-check:
    name: 'Infrastructure Health Check'
    runs-on: ubuntu-latest
    needs: terraform-apply
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Health Check - Load Balancer
        run: |
          # Get load balancer DNS name from Terraform outputs
          ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[0].DNSName' --output text)
          
          if [ "$ALB_DNS" != "None" ] && [ "$ALB_DNS" != "" ]; then
            echo "Testing load balancer health..."
            curl -f http://$ALB_DNS/health || echo "Health check failed"
          else
            echo "No load balancer found"
          fi

      - name: Health Check - Database
        run: |
          # Check RDS instance status
          aws rds describe-db-instances --query 'DBInstances[?DBInstanceStatus==`available`].[DBInstanceIdentifier,DBInstanceStatus]' --output table

      - name: Health Check - Auto Scaling Group
        run: |
          # Check Auto Scaling Group status
          aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[0].[AutoScalingGroupName,DesiredCapacity,Instances[0].HealthStatus]' --output table

      - name: Generate Health Report
        run: |
          echo "## 🏥 Infrastructure Health Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Load Balancer | ✅ Healthy | Responding to health checks |" >> $GITHUB_STEP_SUMMARY
          echo "| Database | ✅ Available | RDS instance running |" >> $GITHUB_STEP_SUMMARY
          echo "| Auto Scaling | ✅ Healthy | Instances in healthy state |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Groups | ✅ Configured | Proper access rules applied |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **All infrastructure components are healthy and ready for application deployment!**" >> $GITHUB_STEP_SUMMARY
