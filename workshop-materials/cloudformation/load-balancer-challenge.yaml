AWSTemplateFormatVersion: '2010-09-09'
Description: 'Load Balancer Challenge - Load balancer health check configuration is incorrect. Students must fix target group settings.'

Parameters:
  StudentEmail:
    Type: String
    Description: Student email address for resource tagging
    Default: 'student@university.edu'
  
  Environment:
    Type: String
    Description: Environment name
    Default: 'workshop'

Resources:
  # VPC and Networking
  WorkshopVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${StudentEmail}-${Environment}-vpc'
        - Key: Challenge
          Value: 'LoadBalancer-HealthCheck-Issues'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${StudentEmail}-${Environment}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref WorkshopVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WorkshopVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${StudentEmail}-${Environment}-public-subnet'

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WorkshopVPC
      Tags:
        - Key: Name
          Value: !Sub '${StudentEmail}-${Environment}-public-rt'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Groups (Correctly configured)
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web tier
      VpcId: !Ref WorkshopVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access from internet
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
          Description: Alternative HTTP port for health checks
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${StudentEmail}-${Environment}-web-sg'

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for load balancer
      VpcId: !Ref WorkshopVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access from internet
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${StudentEmail}-${Environment}-alb-sg'

  # Launch Template with application on port 8080
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${StudentEmail}-${Environment}-lt'
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref WebSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd php
            
            # Start Apache
            systemctl start httpd
            systemctl enable httpd
            
            # Create web application
            cat > /var/www/html/index.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>Load Balancer Challenge - Health Check Issues</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; background: #f8f9fa; }
                    .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                    .error { background: #dc3545; color: white; padding: 15px; border-radius: 5px; margin: 20px 0; }
                    .challenge { background: #ffc107; color: #212529; padding: 15px; border-radius: 5px; margin: 20px 0; }
                    .info { background: #d1ecf1; color: #0c5460; padding: 15px; border-radius: 5px; margin: 20px 0; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>üîß Load Balancer Challenge - Health Check Issues</h1>
                    
                    <div class="error">
                        <h3>‚ùå Problem Identified</h3>
                        <p>The load balancer health checks are failing due to incorrect configuration.</p>
                        <p><strong>Symptoms:</strong> Load balancer shows unhealthy targets, application not accessible</p>
                    </div>
                    
                    <div class="challenge">
                        <h3>üéØ Your Challenge</h3>
                        <p><strong>Objective:</strong> Fix the load balancer target group health check configuration</p>
                        <p><strong>Hint:</strong> Check the health check path, port, and protocol settings</p>
                        <p><strong>Expected Result:</strong> Load balancer targets should be healthy and application accessible</p>
                    </div>
                    
                    <div class="info">
                        <h3>üìã Troubleshooting Steps</h3>
                        <ol>
                            <li>Check target group health status</li>
                            <li>Review health check configuration (path, port, protocol)</li>
                            <li>Verify the health check endpoint exists on instances</li>
                            <li>Test health check endpoint directly</li>
                            <li>Fix the target group configuration</li>
                        </ol>
                    </div>
                    
                    <div class="info">
                        <h3>üîç Investigation Tools</h3>
                        <ul>
                            <li>AWS Console ‚Üí EC2 ‚Üí Load Balancers ‚Üí Target Groups</li>
                            <li>Check target health status</li>
                            <li>Review health check settings</li>
                            <li>Test: curl http://instance-ip/health-check</li>
                        </ul>
                    </div>
                    
                    <div class="info">
                        <h3>üìù Current Application Setup</h3>
                        <ul>
                            <li><strong>Main Application:</strong> Available on port 80</li>
                            <li><strong>Health Check Endpoint:</strong> Available on port 8080</li>
                            <li><strong>Health Check Path:</strong> /health-check</li>
                        </ul>
                    </div>
                    
                    <p><em>Load balancer health checks must match the actual application configuration!</em></p>
                </div>
            </body>
            </html>
            EOF
            
            # Create health check endpoint on port 8080 (different from main app)
            cat > /var/www/html/health-check << 'EOF'
            OK - Health Check Endpoint
            EOF
            
            # Configure Apache to serve on port 8080 for health checks
            echo "Listen 8080" >> /etc/httpd/conf/httpd.conf
            echo "<VirtualHost *:8080>" >> /etc/httpd/conf/httpd.conf
            echo "    DocumentRoot /var/www/html" >> /etc/httpd/conf/httpd.conf
            echo "    <Directory /var/www/html>" >> /etc/httpd/conf/httpd.conf
            echo "        AllowOverride None" >> /etc/httpd/conf/httpd.conf
            echo "        Require all granted" >> /etc/httpd/conf/httpd.conf
            echo "    </Directory>" >> /etc/httpd/conf/httpd.conf
            echo "</VirtualHost>" >> /etc/httpd/conf/httpd.conf
            
            # Create a simple health check page
            cat > /var/www/html/health-check.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>Health Check</title>
            </head>
            <body>
                <h1>Health Check Endpoint</h1>
                <p>Status: OK</p>
                <p>Server: $(hostname)</p>
                <p>Time: $(date)</p>
            </body>
            </html>
            EOF
            
            # Set permissions
            chown -R apache:apache /var/www/html
            chmod -R 755 /var/www/html
            
            # Restart Apache
            systemctl restart httpd
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${StudentEmail}-${Environment}-web-server'
              - Key: Challenge
                Value: 'LoadBalancer-HealthCheck-Issues'

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${StudentEmail}-${Environment}-alb'
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub '${StudentEmail}-${Environment}-alb'
        - Key: Challenge
          Value: 'LoadBalancer-HealthCheck-Issues'

  # MISCONFIGURED Target Group - Wrong health check settings
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${StudentEmail}-${Environment}-tg'
      Port: 80  # MISCONFIGURED: Should be 8080 for health checks
      Protocol: HTTP
      VpcId: !Ref WorkshopVPC
      HealthCheckPath: /health-check  # MISCONFIGURED: This path exists on port 8080, not 80
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80  # MISCONFIGURED: Should be 8080
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub '${StudentEmail}-${Environment}-tg'
        - Key: Challenge
          Value: 'Health check configuration is incorrect'

  # Load Balancer Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${StudentEmail}-${Environment}-asg'
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub '${StudentEmail}-${Environment}-asg'
          PropagateAtLaunch: true
        - Key: Challenge
          Value: 'LoadBalancer-HealthCheck-Issues'
          PropagateAtLaunch: true

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer (targets will be unhealthy)
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  LoadBalancerURL:
    Description: URL to access the application (will fail due to unhealthy targets)
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'

  TargetGroupARN:
    Description: Target Group ARN that needs health check configuration fix
    Value: !Ref TargetGroup

  VPCId:
    Description: VPC ID for troubleshooting
    Value: !Ref WorkshopVPC

  ChallengeInstructions:
    Description: Challenge instructions for students
    Value: 'Load Balancer Challenge: The target group health check is configured incorrectly. Health checks are looking for /health-check on port 80, but the endpoint is on port 8080. Students must fix the health check port configuration.'
