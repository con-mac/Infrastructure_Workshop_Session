AWSTemplateFormatVersion: '2010-09-09'
Description: 'Workshop Student Account Creation Automation Infrastructure - Deploy this to set up automated account creation for 8 students'

Parameters:
  WorkshopName:
    Type: String
    Default: 'infrastructure-workshop-2024'
    Description: 'Name of the workshop (used for resource naming) - must be lowercase for S3 bucket names'
    AllowedPattern: '^[a-z0-9-]+$'
    ConstraintDescription: 'Must contain only lowercase alphanumeric characters and hyphens'

  MaxStudents:
    Type: Number
    Default: 8
    Description: 'Maximum number of student accounts to create'
    MinValue: 1
    MaxValue: 20
    ConstraintDescription: 'Must be between 1 and 20 students'

  BudgetLimit:
    Type: Number
    Default: 10.00
    Description: 'Budget limit per student account in USD'
    MinValue: 1.00
    MaxValue: 100.00
    ConstraintDescription: 'Must be between $1 and $100'

  EmailDomain:
    Type: String
    Default: 'yourdomain.com'
    Description: 'Your email domain for SES (must be verified in SES) - can be any domain for testing'

  WorkshopOUId:
    Type: String
    Default: 'ou-xxxx-xxxxxxxx'
    Description: 'AWS Organizations OU ID for student accounts (optional - can be updated later)'
    AllowedPattern: '^ou-[a-z0-9-]+$'
    ConstraintDescription: 'Must be a valid OU ID format (e.g., ou-xxxx-xxxxxxxx)'

  AWSRegion:
    Type: String
    Default: 'us-east-1'
    Description: 'AWS Region for deployment'
    AllowedValues:
      - us-east-1
      - us-west-2
      - eu-west-1
      - ap-southeast-1
    ConstraintDescription: 'Must be a supported AWS region'

  NotificationEmail:
    Type: String
    Default: 'instructor@yourdomain.com'
    Description: 'Email address for workshop notifications and alerts'
    AllowedPattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    ConstraintDescription: 'Must be a valid email address'

Conditions:
  IsWorkshopOUProvided: !Not [!Equals [!Ref WorkshopOUId, 'ou-xxxx-xxxxxxxx']]

Resources:
  # S3 Bucket for Student Registration Website
  RegistrationWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${WorkshopName}-registration-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Name
          Value: !Sub '${WorkshopName}-registration-website'
        - Key: Workshop
          Value: !Ref WorkshopName
        - Key: Purpose
          Value: 'Student Registration'

  # S3 Bucket Policy for Public Access
  RegistrationWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RegistrationWebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${RegistrationWebsiteBucket.Arn}/*'

  # Upload HTML files to S3 bucket
  StudentRegistrationHTML:
    Type: AWS::S3::Object
    Properties:
      Bucket: !Ref RegistrationWebsiteBucket
      Key: index.html
      ContentType: text/html
      WebsiteRedirectLocation: !Sub 'https://${RegistrationWebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com/student-registration.html'

  StudentRegistrationPage:
    Type: AWS::S3::Object
    Properties:
      Bucket: !Ref RegistrationWebsiteBucket
      Key: student-registration.html
      ContentType: text/html
      Content: |
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>AWS Infrastructure Workshop - Student Registration</title>
            <style>
                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    padding: 20px;
                }
                .container {
                    background: white;
                    border-radius: 15px;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                    padding: 40px;
                    max-width: 500px;
                    width: 100%;
                }
                .header {
                    text-align: center;
                    margin-bottom: 30px;
                }
                .header h1 {
                    color: #333;
                    font-size: 2.2em;
                    margin-bottom: 10px;
                }
                .header p {
                    color: #666;
                    font-size: 1.1em;
                }
                .form-group {
                    margin-bottom: 20px;
                }
                label {
                    display: block;
                    margin-bottom: 8px;
                    color: #333;
                    font-weight: 600;
                }
                input[type="text"], input[type="email"] {
                    width: 100%;
                    padding: 12px;
                    border: 2px solid #e1e5e9;
                    border-radius: 8px;
                    font-size: 16px;
                    transition: border-color 0.3s;
                }
                input[type="text"]:focus, input[type="email"]:focus {
                    outline: none;
                    border-color: #667eea;
                }
                .btn {
                    width: 100%;
                    padding: 15px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    border: none;
                    border-radius: 8px;
                    font-size: 16px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: transform 0.2s;
                }
                .btn:hover {
                    transform: translateY(-2px);
                }
                .btn:disabled {
                    opacity: 0.6;
                    cursor: not-allowed;
                    transform: none;
                }
                .success {
                    background: #d4edda;
                    color: #155724;
                    padding: 15px;
                    border-radius: 8px;
                    margin-top: 20px;
                    display: none;
                }
                .error {
                    background: #f8d7da;
                    color: #721c24;
                    padding: 15px;
                    border-radius: 8px;
                    margin-top: 20px;
                    display: none;
                }
                .cost-info {
                    background: #e7f3ff;
                    border: 1px solid #b3d9ff;
                    border-radius: 8px;
                    padding: 15px;
                    margin-bottom: 20px;
                }
                .cost-info h3 {
                    color: #0066cc;
                    margin-bottom: 10px;
                }
                .cost-info ul {
                    color: #333;
                    margin-left: 20px;
                }
                .cost-info li {
                    margin-bottom: 5px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>🚀 AWS Infrastructure Workshop</h1>
                    <p>Register for your student AWS account</p>
                </div>

                <div class="cost-info">
                    <h3>💰 Workshop Cost Information</h3>
                    <ul>
                        <li><strong>Total Cost:</strong> $1.84 per student (3 hours)</li>
                        <li><strong>Infrastructure:</strong> 2-tier web application</li>
                        <li><strong>Services:</strong> EC2, RDS, Load Balancer, VPC</li>
                        <li><strong>Budget Limit:</strong> $10 per student account</li>
                    </ul>
                </div>

                <form id="registrationForm">
                    <div class="form-group">
                        <label for="studentName">Full Name *</label>
                        <input type="text" id="studentName" name="studentName" required>
                    </div>

                    <div class="form-group">
                        <label for="studentEmail">Email Address *</label>
                        <input type="email" id="studentEmail" name="studentEmail" required>
                    </div>

                    <div class="form-group">
                        <label for="studentId">Student ID (Optional)</label>
                        <input type="text" id="studentId" name="studentId">
                    </div>

                    <button type="submit" class="btn" id="submitBtn">
                        Register for Workshop
                    </button>
                </form>

                <div id="successMessage" class="success">
                    <strong>Registration Successful!</strong><br>
                    Your AWS account is being created. You'll receive an email with your credentials shortly.
                </div>

                <div id="errorMessage" class="error">
                    <strong>Registration Failed!</strong><br>
                    <span id="errorText"></span>
                </div>
            </div>

            <script>
                // Configuration - Replace with your actual API endpoints
                const API_BASE_URL = 'YOUR_API_GATEWAY_URL_HERE';
                const WORKSHOP_NAME = 'Infrastructure-Workshop-2024';
                const MAX_STUDENTS = 8;
                const BUDGET_LIMIT = 10.00;

                document.getElementById('registrationForm').addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    const submitBtn = document.getElementById('submitBtn');
                    const successMessage = document.getElementById('successMessage');
                    const errorMessage = document.getElementById('errorMessage');
                    const errorText = document.getElementById('errorText');
                    
                    // Disable submit button
                    submitBtn.disabled = true;
                    submitBtn.textContent = 'Creating Account...';
                    
                    // Hide previous messages
                    successMessage.style.display = 'none';
                    errorMessage.style.display = 'none';
                    
                    try {
                        const formData = new FormData(e.target);
                        const data = Object.fromEntries(formData);
                        
                        // Add workshop configuration
                        data.workshopName = WORKSHOP_NAME;
                        data.maxStudents = MAX_STUDENTS;
                        data.budgetLimit = BUDGET_LIMIT;
                        
                        const response = await fetch(`${API_BASE_URL}/register`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(data)
                        });
                        
                        if (response.ok) {
                            successMessage.style.display = 'block';
                            e.target.reset();
                        } else {
                            const errorData = await response.json();
                            errorText.textContent = errorData.message || 'An error occurred during registration.';
                            errorMessage.style.display = 'block';
                        }
                    } catch (error) {
                        errorText.textContent = 'Network error. Please check your connection and try again.';
                        errorMessage.style.display = 'block';
                    } finally {
                        // Re-enable submit button
                        submitBtn.disabled = false;
                        submitBtn.textContent = 'Register for Workshop';
                    }
                });
            </script>
        </body>
        </html>

  ErrorPage:
    Type: AWS::S3::Object
    Properties:
      Bucket: !Ref RegistrationWebsiteBucket
      Key: error.html
      ContentType: text/html
      Content: |
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Error - AWS Infrastructure Workshop</title>
            <style>
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    padding: 20px;
                }
                .container {
                    background: white;
                    border-radius: 15px;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                    padding: 40px;
                    max-width: 500px;
                    width: 100%;
                    text-align: center;
                }
                .error-icon {
                    font-size: 4em;
                    color: #e74c3c;
                    margin-bottom: 20px;
                }
                h1 {
                    color: #333;
                    margin-bottom: 20px;
                }
                p {
                    color: #666;
                    margin-bottom: 30px;
                }
                .btn {
                    display: inline-block;
                    padding: 12px 24px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    text-decoration: none;
                    border-radius: 8px;
                    font-weight: 600;
                    transition: transform 0.2s;
                }
                .btn:hover {
                    transform: translateY(-2px);
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="error-icon">⚠️</div>
                <h1>Page Not Found</h1>
                <p>The page you're looking for doesn't exist or has been moved.</p>
                <a href="/" class="btn">Go to Registration</a>
            </div>
        </body>
        </html>

  # Lambda Function for Account Creation
  AccountCreationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${WorkshopName}-account-creation'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt AccountCreationRole.Arn
      Timeout: 300
      Environment:
        Variables:
          WORKSHOP_NAME: !Ref WorkshopName
          MAX_STUDENTS: !Ref MaxStudents
          BUDGET_LIMIT: !Ref BudgetLimit
          EMAIL_DOMAIN: !Ref EmailDomain
          WORKSHOP_OU_ID: !Ref WorkshopOUId
          NOTIFICATION_EMAIL: !Ref NotificationEmail
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          
          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          # Initialize AWS clients
          organizations = boto3.client('organizations')
          ses = boto3.client('ses')
          
          def lambda_handler(event, context):
              try:
                  # Parse request
                  body = json.loads(event['body'])
                  email = body['email']
                  name = body.get('name', email.split('@')[0])
                  
                  # Validate email format
                  if '@' not in email or '.' not in email.split('@')[1]:
                      return {
                          'statusCode': 400,
                          'body': json.dumps({'error': 'Invalid email format'})
                      }
                  
                  # TODO: Add full account creation logic here
                  # This is a placeholder - replace with full lambda-account-creation.py code
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'Account creation initiated',
                          'email': email,
                          'name': name,
                          'workshop': event['environment']['variables']['WORKSHOP_NAME']
                      })
                  }
                  
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': 'Internal server error'})
                  }
      Tags:
        - Key: Name
          Value: !Sub '${WorkshopName}-account-creation'
        - Key: Workshop
          Value: !Ref WorkshopName

  # IAM Role for Lambda Function
  AccountCreationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: WorkshopAutomationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - organizations:*
                  - sso-admin:*
                  - ses:SendEmail
                  - ses:SendRawEmail
                  - budgets:*
                  - s3:GetObject
                  - s3:PutObject
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${WorkshopName}-lambda-role'
        - Key: Workshop
          Value: !Ref WorkshopName

  # API Gateway for Student Registration
  RegistrationAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${WorkshopName}-registration-api'
      Description: 'API for student account registration'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Name
          Value: !Sub '${WorkshopName}-registration-api'
        - Key: Workshop
          Value: !Ref WorkshopName

  # API Gateway Resource
  RegistrationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RegistrationAPI
      ParentId: !GetAtt RegistrationAPI.RootResourceId
      PathPart: register

  # API Gateway Method
  RegistrationMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RegistrationAPI
      ResourceId: !Ref RegistrationResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AccountCreationFunction.Arn}/invocations'

  # API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: RegistrationMethod
    Properties:
      RestApiId: !Ref RegistrationAPI
      StageName: prod

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AccountCreationFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegistrationAPI}/*/*'

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AccountCreationFunction}'
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: !Sub '${WorkshopName}-lambda-logs'
        - Key: Workshop
          Value: !Ref WorkshopName

  # S3 Bucket for Lambda Code Storage
  LambdaCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${WorkshopName}-lambda-code-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub '${WorkshopName}-lambda-code'
        - Key: Workshop
          Value: !Ref WorkshopName

  # CloudWatch Dashboard
  WorkshopDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${WorkshopName}-automation-dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${AccountCreationFunction}"],
                  ["AWS/Lambda", "Errors", "FunctionName", "${AccountCreationFunction}"]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Function Metrics"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "Count", "ApiName", "${RegistrationAPI}"]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "API Gateway Metrics"
              }
            }
          ]
        }

Outputs:
  RegistrationWebsiteURL:
    Description: 'URL for student registration website'
    Value: !Sub 'http://${RegistrationWebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${WorkshopName}-RegistrationWebsiteURL'

  RegistrationAPIURL:
    Description: 'API endpoint for account registration'
    Value: !Sub 'https://${RegistrationAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/register'
    Export:
      Name: !Sub '${WorkshopName}-RegistrationAPIURL'

  LambdaFunctionName:
    Description: 'Name of the Lambda function for account creation'
    Value: !Ref AccountCreationFunction
    Export:
      Name: !Sub '${WorkshopName}-LambdaFunctionName'

  LambdaCodeBucketName:
    Description: 'S3 bucket for storing Lambda code'
    Value: !Ref LambdaCodeBucket
    Export:
      Name: !Sub '${WorkshopName}-LambdaCodeBucket'

  DashboardURL:
    Description: 'CloudWatch Dashboard URL for monitoring'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${WorkshopDashboard}'
    Export:
      Name: !Sub '${WorkshopName}-DashboardURL'

  WorkshopConfiguration:
    Description: 'Workshop configuration summary'
    Value: !Sub 'Workshop: ${WorkshopName}, Max Students: ${MaxStudents}, Budget: $${BudgetLimit}, Region: ${AWS::Region}'
    Export:
      Name: !Sub '${WorkshopName}-Configuration'
